// A math library.
// 
// This module requires `libm` installed.
module Math;

// Calculates arc cosine of the argument.
// 
// This is wrapper of C's acos.
acos : F64 -> F64;
acos = |x| FFI_CALL[F64 acos(F64), x];

// Calculates arc sine of the argument.
// 
// This is wrapper of C's asin.
asin : F64 -> F64;
asin = |x| FFI_CALL[F64 asin(F64), x];

// Calculates arc tangent of the argument.
// 
// This is wrapper of C's atan.
atan : F64 -> F64;
atan = |x| FFI_CALL[F64 atan(F64), x];

// `atan2(y, x)` calculates an angle t such that (cos(t), sin(t)) is parallel to (x, y).
// 
// This is wrapper of C's atan2.
atan2 : F64 -> F64 -> F64;
atan2 = |x, y| FFI_CALL[F64 atan2(F64, F64), x, y];

// Calculates table (2-dimensional array) of binomial coefficients.
// 
// Deprecated: this function will be moved to another project in the future.
//
// `binomial_coefficients(m)` evaluates to an array of arrays `table` where `table.@(n).@(r)` is the binomial coefficient "binom(n, r)" for 0 <= n <= m and 0 <= r <= n.
// Here `m` has to be less than or equal to 66 to avoid overflow.
binomial_coefficients : I64 -> Array (Array I64);
binomial_coefficients = |m| (
    if !(0 <= m && m <= 66) { undefined("[Math::binomial_coefficients] The argument must be non-negative and less than or equal to 66.") };
    let size = m + 1;
    let arr = Iterator::range(0, size).fold(Array::empty(size), |n, arr| arr.push_back(Array::fill(n+1, 0)));
    let arr = arr.(mod(0) $ set(0) $ 1);
    Iterator::range(1, size).fold(arr, |n, arr| (
        Iterator::range(0, n+1).fold(arr, |r, arr| (
            let x = if 0 <= r-1 && r-1 <= n-1 { arr.@(n-1).@(r-1) } else { 0 };
            let y = if 0 <= r && r <= n-1 { arr.@(n-1).@(r) } else { 0 };
            arr.(mod(n) $ set(r) $ x + y)
        ))
    ))
);

// Calculates the smallest integral value not less than the argument.
// 
// This is wrapper of C's ceil.
ceil : F64 -> F64;
ceil = |x| FFI_CALL[F64 ceil(F64), x];

// Calculates the cosine of the argument.
// 
// This is wrapper of C's cos.
cos : F64 -> F64;
cos = |x| FFI_CALL[F64 cos(F64), x];

// Calculates the hyperbolic cosine of the argument.
// 
// This is wrapper of C's cosh.
cosh : F64 -> F64;
cosh = |x| FFI_CALL[F64 cosh(F64), x];

// Calculates the natural exponential of the argument.
// 
// This is wrapper of C's exp.
exp : F64 -> F64;
exp = |x| FFI_CALL[F64 exp(F64), x];

// Calculates the largest integral value not greater than the argument.
// 
// This is wrapper of C's floor.
floor : F64 -> F64;
floor = |x| FFI_CALL[F64 floor(F64), x];

// Calculates the floating point remainder of division. 
// 
// `x.fmod(y)` evaluates to the remainder of dividing x by y.
// 
// This is wrapper of C's fmod.
fmod : F64 -> F64 -> F64;
fmod = |y, x| FFI_CALL[F64 fmod(F64, F64), x, y];

// Splits a floating point number to normalized fraction and an exponent.
// 
// This is wrapper of C's frexp. 
frexp : F64 -> (F64, I32);
frexp = |x| (
    let e = Array::fill(1, 0_I32);
    let f = e.borrow_boxed(|ptr| FFI_CALL[F64 frexp(F64, Ptr), x, ptr]);
    (f, e.@(0))
);

// Calculates greatest common divisor of two integers.
// Deprecated: this function will be moved to another project in the future.
// 
// NOTE: currently, this function does not support I64::minimum.
gcd : I64 -> I64 -> I64;
gcd = |n, m| _gcd_nonneg(n.abs, m.abs);

// Calculates greatest common divisor of two non-negative integers. 
_gcd_nonneg : I64 -> I64 -> I64;
_gcd_nonneg = |n, m| (
    if n > m { _gcd_nonneg(m, n) };
    // n <= m
    if n == 0 { m };
    _gcd_nonneg(m % n, n)
);

// Multiplies a floating point number by power of two.
// 
// This is wrapper of C's ldexp. 
ldexp : I32 -> F64 -> F64;
ldexp = |e, x| FFI_CALL[F64 ldexp(F64, I32), x, e];

// Calculates natural logarithm.
// 
// This is wrapper of C's log. 
log : F64 -> F64;
log = |x| FFI_CALL[F64 log(F64), x];

// Calculates base-10 logarithm.
// 
// This is wrapper of C's log10. 
log10 : F64 -> F64;
log10 = |x| FFI_CALL[F64 log10(F64), x];

// Converts a floating pointer number into the pair of fractional part and integral part.
// 
// This is wrapper of C's modf.
modf : F64 -> (F64, F64);
modf = |x| (
    let int = Array::fill(1, 0.0);
    let fr = int.borrow_boxed(|ptr| FFI_CALL[F64 modf(F64, Ptr), x, ptr]);
    (fr, int.@(0))
);

// pi as F32
pi32 : F32;
pi32 = 3.14159265_F32;

// pi as F64
pi64 : F64;
pi64 = 3.141592653589793;

// Napier's constant as F32
e32 : F32;
e32 = 2.71828183_F32;

// Napier's constant as F64
e64 : F64;
e64 = 2.718281828459045;

// Power function.
// 
// `x.pow(y)` evaluates to x^y.
// 
// This is wrapper of C's pow.
pow : F64 -> F64 -> F64;
pow = |y, x| FFI_CALL[F64 pow(F64, F64), x, y];

// Calculates the sine of the argument.
//
// This is wrapper of C's sin.
sin : F64 -> F64;
sin = |x| FFI_CALL[F64 sin(F64), x];

// Calculates the hyperbolic sine of the argument.
// 
// This is wrapper of C's sinh.
sinh : F64 -> F64;
sinh = |x| FFI_CALL[F64 sinh(F64), x];

// Calculates square root of the argument.
// 
// This is wrapper of C's sqrt.
sqrt : F64 -> F64;
sqrt = |x| FFI_CALL[F64 sqrt(F64), x];

// Calculates the tangent of the argument.
// 
// This is wrapper of C's tan.
tan : F64 -> F64;
tan = |x| FFI_CALL[F64 tan(F64), x];

// Calculates the hyperbolic tangent of the argument.
// 
// This is wrapper of C's tanh.
tanh : F64 -> F64;
tanh = |x| FFI_CALL[F64 tanh(F64), x];