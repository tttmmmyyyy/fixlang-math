module Test;

import Math;

test : IO ();
test = (
    // gcd
    eval assert_eq(|_|"case gcd-0", gcd(16, 6), 2);
    eval assert_eq(|_|"case gcd-1", gcd(544, 119), 17);
    eval assert_eq(|_|"case gcd-2", gcd(2089, 3571), 1);
    eval assert_eq(|_|"case gcd-3", gcd(-16, 6), 2);
    eval assert_eq(|_|"case gcd-4", gcd(544, -119), 17);
    eval assert_eq(|_|"case gcd-5", gcd(-2089, 3571), 1);
    eval assert_eq(|_|"case gcd-6", gcd(0, 0), 0);
    eval assert_eq(|_|"case gcd-7", gcd(0, 1), 1);
    eval assert_eq(|_|"case gcd-8", gcd(-1, 0), 1);

    // binomial_coefficients
    let binom = [
        [1],
        [1, 1],
        [1, 2, 1],
        [1, 3, 3, 1],
        [1, 4, 6, 4, 1],
        [1, 5, 10, 10, 5, 1],
        [1, 6, 15, 20, 15, 6, 1],
        [1, 7, 21, 35, 35, 21, 7, 1],
        [1, 8, 28, 56, 70, 56, 28, 8, 1],
        [1, 9, 36, 84, 126, 126, 84, 36, 9, 1],
        [1, 10, 45, 120, 210, 252, 210, 120, 45, 10, 1]
    ];
    eval assert_eq(|_|"case binomial_coefficients-0", binomial_coefficients(10), binom);

    let binom = [
        [1]
    ];
    eval assert_eq(|_|"case binomial_coefficients-1", binomial_coefficients(0), binom);

    let binom = [
        [1],
        [1, 1]
    ];
    eval assert_eq(|_|"case binomial_coefficients-2", binomial_coefficients(1), binom);

    // libm functions
    eval assert(|_|"case acos", (acos(0.2) - 1.369438406004566).abs < 1.0e-8);
    eval assert(|_|"case asin", (asin(0.2) - 0.2013579207903308).abs < 1.0e-8);
    eval assert(|_|"case atan", (atan(0.2) - 0.19739555984988078).abs < 1.0e-8);            
    eval assert(|_|"case atan2", (atan2(0.2, 0.5) - 0.3805063771123649).abs < 1.0e-8);
    eval assert(|_|"case ceil", (ceil(1.9) - 2.0).abs < 1.0e-8);
    eval assert(|_|"case cos", (cos(0.2) - 0.9800665778412416).abs < 1.0e-8);
    eval assert(|_|"case cosh", (cosh(0.2) - 1.020066755619076).abs < 1.0e-8);
    eval assert(|_|"case exp", (exp(0.2) - 1.2214027581601699).abs < 1.0e-8);
    eval assert(|_|"case floor", (floor(1.2) - 1.0).abs < 1.0e-8);
    eval assert(|_|"case fmod", (2.0.fmod(1.2) - 0.8).abs < 1.0e-8);
    eval assert(|_|"case frexp 1", (frexp(2560.0).@0 - 0.625).abs < 1.0e-8);
    eval assert(|_|"case frexp 2", (frexp(2560.0).@1 - 12_I32).abs == 0_I32);
    eval assert(|_|"case ldexp", (3.14.ldexp(2_I32) - 12.56).abs < 1.0e-8);
    eval assert(|_|"case log", (log(0.2) - -1.6094379124341003).abs < 1.0e-8);
    eval assert(|_|"case log10", (log10(0.2) - -0.6989700043360187).abs < 1.0e-8);
    eval assert(|_|"case modf 1", (modf(3.14).@0 - 0.14).abs < 1.0e-8);
    eval assert(|_|"case modf 2", (modf(3.14).@1 - 3.0).abs < 1.0e-8);
    eval assert(|_|"case pow", (3.14.pow(2.72) - 22.472357891492628).abs < 1.0e-8);
    eval assert(|_|"case sin", (sin(0.2) - 0.19866933079506122).abs < 1.0e-8);
    eval assert(|_|"case sinh", (sinh(0.2) - 0.20133600254109402).abs < 1.0e-8);
    eval assert(|_|"case sqrt", (sqrt(0.2) - 0.4472135954999579).abs < 1.0e-8);
    eval assert(|_|"case tan", (tan(0.2) - 0.2027100355086725).abs < 1.0e-8);
    eval assert(|_|"case tanh", (tanh(0.2) - 0.197375320224904).abs < 1.0e-8);

    pure()
);